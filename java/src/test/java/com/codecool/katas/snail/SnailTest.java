package com.codecool.katas.snail;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.params.provider.Arguments.arguments;

public class SnailTest {

    private final Snail snail = new Snail();

    private static Stream<Arguments> getTestCases() {
        int[][] testArray = {
                {}
        };
        int[][] testArray1 = {
                {1}
        };
        int[][] testArray2 = {
                {1, 2},
                {3, 4}
        };
        int[][] testArray3 = {
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
        };
        int[][] testArray4 = {
                {1, 2, 3, 9},
                {4, 5, 6, 4},
                {7, 8, 9, 1},
                {1, 2, 3, 4}
        };
        int[][] testArray5 = {
                {937, 207, 694, 480, 120, 249,  58, 149, 499, 679, 306, 734, 364, 757, 179},
                {303, 518,  32, 891, 720, 135, 991, 212, 116, 613, 943, 252, 856, 328, 374},
                {922,   4, 863, 380, 678, 297, 486, 712, 359, 311, 636, 811, 347, 702, 526},
                {995, 257, 806, 608, 526, 604,  10, 342,  40, 625, 880, 744, 256, 575, 328},
                {521, 795, 826, 167, 924,  76,  68, 108,  36, 922, 632, 919, 774, 601, 333},
                {735, 472, 373,  65, 726, 932, 970,  69, 375, 504, 901, 203, 261, 415, 957},
                {727, 718, 694, 862, 134,  28, 651, 452, 701, 693, 550,  60, 561, 937, 695},
                {561, 751, 340, 245, 953, 120, 394, 676, 928, 827, 669, 592, 923, 216, 645},
                {848, 330, 740,  34, 920, 332, 964, 889, 121, 504, 605,   8, 153, 768, 479},
                {898, 244, 907, 378, 599, 530, 563, 498, 816, 846, 514, 369, 799, 219, 622},
                {132, 685, 147, 128, 768, 244, 228, 651, 879, 904, 307, 195, 367, 506,  88},
                {500, 549, 322, 247, 727, 293, 459, 810, 303,  59, 914, 556, 895,  21, 193},
                {968, 494, 334, 506, 731,  75, 208, 866, 293, 925,  60, 526, 819, 522, 400},
                {622, 535, 625, 525, 525, 592, 194, 255, 620, 889, 785,  15, 437,  59, 889},
                {743, 304, 438, 992,  58, 227, 298, 735, 976, 472, 792, 336, 605, 271,  86}
        };

        int[] testResult = {};
        int[] testResult1 = {1};
        int[] testResult2 = {1, 2, 4, 3};
        int[] testResult3 = {1, 2, 3, 6, 9, 8, 7, 4, 5};
        int[] testResult4 = {1, 2, 3, 9, 4, 1, 4, 3, 2, 1, 7, 4, 5, 6, 9, 8};
        int[] testResult5 = {
                937, 207, 694, 480, 120, 249,  58, 149, 499, 679, 306, 734, 364, 757, 179,
                374, 526, 328, 333, 957, 695, 645, 479, 622,  88, 193, 400, 889,  86, 271,
                605, 336, 792, 472, 976, 735, 298, 227,  58, 992, 438, 304, 743, 622, 968,
                500, 132, 898, 848, 561, 727, 735, 521, 995, 922, 303, 518,  32, 891, 720,
                135, 991, 212, 116, 613, 943, 252, 856, 328, 702, 575, 601, 415, 937, 216,
                768, 219, 506,  21, 522,  59, 437,  15, 785, 889, 620, 255, 194, 592, 525,
                525, 625, 535, 494, 549, 685, 244, 330, 751, 718, 472, 795, 257,   4, 863,
                380, 678, 297, 486, 712, 359, 311, 636, 811, 347, 256, 774, 261, 561, 923,
                153, 799, 367, 895, 819, 526,  60, 925, 293, 866, 208,  75, 731, 506, 334,
                322, 147, 907, 740, 340, 694, 373, 826, 806, 608, 526, 604,  10, 342,  40,
                625, 880, 744, 919, 203,  60, 592,   8, 369, 195, 556, 914,  59, 303, 810,
                459, 293, 727, 247, 128, 378,  34, 245, 862,  65, 167, 924,  76,  68, 108,
                 36, 922, 632, 901, 550, 669, 605, 514, 307, 904, 879, 651, 228, 244, 768,
                599, 920, 953, 134, 726, 932, 970,  69, 375, 504, 693, 827, 504, 846, 816,
                498, 563, 530, 332, 120,  28, 651, 452, 701, 928, 121, 889, 964, 394, 676
        };

        return Stream.of(
                arguments(testResult, testArray),
                arguments(testResult1, testArray1),
                arguments(testResult2, testArray2),
                arguments(testResult3, testArray3),
                arguments(testResult4, testArray4),
                arguments(testResult5, testArray5)
        );
    }

    @ParameterizedTest
    @MethodSource("getTestCases")
    public void sortTest(int[] result, int[][] array) {
        assertArrayEquals(result, snail.sort(array));
    }

}
